In conjunction with the alternative DOS keyboard and console drivers FreeKEYB and K3PLUS, Scroll Lock also served as part of a copy & paste facility between applications. Compared to the standard keyboard driver KEYB these drivers offered a number of extensions including an extended keystroke buffer with key stacking facility, macro recorder and a second cursor called CopyCursor, which could be invoked on demand (by default on pressing Ctrl+Alt+F11 or the middle mouse button) and freely moved on the screen using the cursor keys or the mouse, even outside the area reachable by the standard cursor in the running application. Once invoked, pressing F11 (or the left mouse button) the characters under the CopyCursor could be stuffed, one after another, into the keyboard buffer, from where they would be read by the running application as emulated key (or Alt Numpad) input, thereby typically showing up at the location of the standard cursor. The CopyCursor would move to the next screen position after each F11 (or backwards with each ⇧ Shift+F11). Normal keyboard input was still possible while the CopyCursor was enabled, and the user could switch between the two cursors by toggling the Ctrl+Alt+F11 hotkey again. Pressing Esc or ↵ Enter would exit the CopyCursor, so that, on its next invocation, it would show up at the position of the standard cursor again rather than at its previous location. If the screen contents was scrolled, the position of the CopyCursor would move accordingly until reaching the display limits. With Scroll Lock activated, keypresses would still reach the normal keystroke buffer, while CopyCursor input would be stacked up internally for later use in a second queue, dynamically maintained within the extended keystroke buffer. Thereby, it was possible to "collect" selected screen output from different programs and spool out the data much later while within yet another application by toggling Scroll Lock off again. It was also possible to use this as input into the macro recorder for later use as scrap macro. Since this was an integral part of these keyboard drivers, it was fully transparent to running software and therefore worked with virtually any DOS programs, including at the command prompt, temporary shelled programs and task switchers.[7][8][9]