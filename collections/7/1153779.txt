The term junkyard computing is a colloquial expression for using old or inferior hardware to fulfill computational tasks while handling reliability and availability on software level. It utilizes abstraction of computational resources via software, allowing hardware replacement at very low effort. Ease of replacement is hereby a corner point since hardware failures are expected at any time due to the condition of the underlying infrastructure. This paradigm became more widely used with the introduction of cluster orchestration software like Kubernetes or Apache Mesos, since large monolithic applications require reliability and availability on machine level whereas this kind of software is fault tolerant by design. Those orchestration tools also introduced fairly fast set-up processes allowing to use junkyard computing economically and even making this pattern applicable in the first place. Further use cases were introduced when continuous delivery was getting more widely accepted. Infrastructure to execute tests and static code analysis was needed which requires as much performance as possible while being extremely cost effective. From an economical and technological perspective, junkyard computing is only practicable for a small amount of users or companies. It already requires a descend amount of physical machines to compensate hardware failures while maintaining the required reliability and availability. This implies a direct need for a matching underling infrastructure to house all the computers and servers. Scaling this paradigm is also quite limited due to the increasing importance of factors like power efficiency and maintenance efforts, making this kind of computing perfect for mid-sized applications.